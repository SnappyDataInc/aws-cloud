#!/usr/bin/env bash
#
# Copyright (c) 2018 SnappyData, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License. See accompanying
# LICENSE file.
#

cat /etc/passwd > /tmp/passwd
echo "$(id -u):x:$(id -u):$(id -g):dynamic uid:/opt/snappydata:/bin/false" >> /tmp/passwd

export NSS_WRAPPER_PASSWD=/tmp/passwd
export NSS_WRAPPER_GROUP=/etc/group
export LD_PRELOAD=/usr/lib64/libnss_wrapper.so

echo "Starting sshd service"
service sshd start

HOSTNAME=`hostname`
PRODUCT_DIR=/opt/snappydata
WORK_DIR="$PRODUCT_DIR/work/$HOSTNAME"
mkdir -p "$WORK_DIR"
HOSTNAME_FOR_CLIENTS=""

die() { echo "ERROR: $*" 1>&2; exit 1; }

getServiceIP() {
    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
    KUBE_CACERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    KUBE_API_URL="https://kubernetes/api/v1/namespaces/default/services/$1/status"
    SERVICE_IP=""
    wget -O- -q --ca-certificate $KUBE_CACERT  --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_API_URL}
    if [ $? != 0 ]; then
      echo "ERROR: The service $1 is not found."
    else
      wget -O- -q --ca-certificate $KUBE_CACERT  --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_API_URL} | grep Forbidden
      if [ $? == 0 ]; then
        echo "ERROR: The current service-account does not have permission to list services."
      else
        success=1
        counter=1
        echo "Retrieving IP for $1 service ..."
        while [ ${success} != 0 -a ${counter} -le 60 ]
        do
          sleep 2s
          SERVICE_IP=`wget -O- -q --ca-certificate $KUBE_CACERT  --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_API_URL} | grep ip | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
          success=$?
          let counter=counter+1
        done
        if [ -z ${SERVICE_IP} ]; then
           echo "Could not get IP for service $1"
        else
           echo "Retrieved IP ${SERVICE_IP} for $1 service."
        fi
      fi
    fi
}

waitFor() {
  COUNTER=0;
  while ! nc -z $1 $2 > /dev/null 2>&1; do
    echo "Waiting for $1 to be online ..."
    sleep 5
    let COUNTER=COUNTER+1
    if [ ${COUNTER} -eq 50 ]; then
      echo "ERROR: $1 is not up."
      exit 1
    fi
  done
  echo "Found service $1 listening on port $2."
}

PROCESS_NAME=$1

while (( "$#" )); do
  case "$2" in
    --wait-for)
      shift
      waitFor $2 $3
      shift 2
      let SHIFT_POS=SHIFT_POS+3
    ;;
    --get-ip)
      shift
      getServiceIP $2
      shift
      let SHIFT_POS=SHIFT_POS+2
    ;;
    *)
      break
    ;;
  esac
done

shift

case "$PROCESS_NAME" in
   "")
      echo "Usage: start (locator|server|lead|all) [--get-ip service-name] [--wait-for service-name service-port] [<snappy-config> ...]"
      exit 1
      ;;
   locator)
      if [ ! -z ${SERVICE_IP} ]; then
        HOSTNAME_FOR_CLIENTS="-hostname-for-clients=$SERVICE_IP"
      fi
      echo "$HOSTNAME -dir=$WORK_DIR $@ $HOSTNAME_FOR_CLIENTS" > ${PRODUCT_DIR}/conf/locators
      ${PRODUCT_DIR}/sbin/snappy-locators.sh start
      ;;
   server)
      if [ ! -z ${SERVICE_IP} ]; then
        HOSTNAME_FOR_CLIENTS="-hostname-for-clients=$SERVICE_IP"
      fi
      echo "$HOSTNAME -dir=$WORK_DIR $@ $HOSTNAME_FOR_CLIENTS" > ${PRODUCT_DIR}/conf/servers
      ${PRODUCT_DIR}/sbin/snappy-servers.sh start
      ;;
   lead)
      if [ ! -z ${SERVICE_IP} ]; then
        echo "SPARK_PUBLIC_DNS=$SERVICE_IP" >> ${PRODUCT_DIR}/conf/spark-env.sh
      fi
      echo "$HOSTNAME -dir=$WORK_DIR $@" > ${PRODUCT_DIR}/conf/leads
      ${PRODUCT_DIR}/sbin/snappy-leads.sh start
      ;;
   all)
      ${PRODUCT_DIR}/sbin/snappy-start-all.sh -client-bind-address=0.0.0.0 -prefer-netserver-ipaddress=true "$@"
      ;;
   * )
   echo "Usage: start (locator|server|lead|all) [--get-ip service-name] [--wait-for service-name service-port] [<snappy-config> ...]"
   die "Invalid Argument"
esac


tail -f /dev/null
